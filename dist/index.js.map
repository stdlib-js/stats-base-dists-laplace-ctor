{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-laplace-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-laplace-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-laplace-mean' );\nvar median = require( '@stdlib/stats-base-dists-laplace-median' );\nvar mode = require( '@stdlib/stats-base-dists-laplace-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-laplace-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-laplace-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-laplace-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-laplace-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-laplace-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-laplace-logpdf' );\nvar mgf = require( '@stdlib/stats-base-dists-laplace-mgf' );\nvar pdf = require( '@stdlib/stats-base-dists-laplace-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-laplace-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction laplaceCDF( x ) {\n\treturn cdf( x, this.mu, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction laplaceLogCDF( x ) {\n\treturn logcdf( x, this.mu, this.b );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction laplaceLogPDF( x ) {\n\treturn logpdf( x, this.mu, this.b );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction laplaceMGF( t ) {\n\treturn mgf( t, this.mu, this.b );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction laplacePDF( x ) {\n\treturn pdf( x, this.mu, this.b );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction laplaceQuantile( p ) {\n\treturn quantile( p, this.mu, this.b );\n}\n\n\n// MAIN //\n\n/**\n* Laplace distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - location parameter\n* @param {PositiveNumber} [b=1.0] - scale parameter\n* @throws {TypeError} `b` must be a positive number\n* @returns {Laplace} distribution instance\n*\n* @example\n* var laplace = new Laplace( 1.0, 1.0 );\n*\n* var y = laplace.cdf( 1.5 );\n* // returns ~0.697\n*\n* var mu = laplace.mean;\n* // returns 1.0\n*/\nfunction Laplace() {\n\tvar mu;\n\tvar b;\n\tif ( !(this instanceof Laplace) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Laplace();\n\t\t}\n\t\treturn new Laplace( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tb = arguments[ 1 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Location parameter must be a number. Value: `%s`.', mu ) );\n\t\t}\n\t\tif ( !isPositive( b ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Scale parameter must be a positive number. Value: `%s`.', b ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t\tb = 1.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'b', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn b;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tb = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Laplace distribution differential entropy.\n*\n* @name entropy\n* @memberof Laplace.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.entropy;\n* // returns ~4.178\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'entropy', function get() {\n\treturn entropy( this.mu, this.b );\n});\n\n/**\n* Laplace distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Laplace.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.kurtosis;\n* // returns 3.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.mu, this.b );\n});\n\n/**\n* Laplace distribution expected value.\n*\n* @name mean\n* @memberof Laplace.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'mean', function get() {\n\treturn mean( this.mu, this.b );\n});\n\n/**\n* Laplace distribution median.\n*\n* @name median\n* @memberof Laplace.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'median', function get() {\n\treturn median( this.mu, this.b );\n});\n\n/**\n* Laplace distribution mode.\n*\n* @name mode\n* @memberof Laplace.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'mode', function get() {\n\treturn mode( this.mu, this.b );\n});\n\n/**\n* Laplace distribution skewness.\n*\n* @name skewness\n* @memberof Laplace.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.skewness;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'skewness', function get() {\n\treturn skewness( this.mu, this.b );\n});\n\n/**\n* Laplace distribution standard deviation.\n*\n* @name stdev\n* @memberof Laplace.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.stdev;\n* // returns ~16.971\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'stdev', function get() {\n\treturn stdev( this.mu, this.b );\n});\n\n/**\n* Laplace distribution variance.\n*\n* @name variance\n* @memberof Laplace.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var laplace = new Laplace( 4.0, 12.0 );\n*\n* var v = laplace.variance;\n* // returns 288.0\n*/\nsetReadOnlyAccessor( Laplace.prototype, 'variance', function get() {\n\treturn variance( this.mu, this.b );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.cdf( 0.5 );\n* // returns ~0.344\n*/\nsetReadOnly( Laplace.prototype, 'cdf', laplaceCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.logcdf( 0.9 );\n* // returns ~-0.968\n*/\nsetReadOnly( Laplace.prototype, 'logcdf', laplaceLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.logpdf( 0.8 );\n* // returns ~-2.379\n*/\nsetReadOnly( Laplace.prototype, 'logpdf', laplaceLogPDF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.mgf( 0.01 );\n* // returns ~1.022\n*/\nsetReadOnly( Laplace.prototype, 'mgf', laplaceMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.pdf( 0.8 );\n* // returns ~0.093\n*/\nsetReadOnly( Laplace.prototype, 'pdf', laplacePDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Laplace.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var laplace = new Laplace( 2.0, 4.0 );\n*\n* var v = laplace.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Laplace.prototype, 'quantile', laplaceQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Laplace;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution constructor.\n*\n* @module @stdlib/stats-base-dists-laplace-ctor\n*\n* @example\n* var Laplace = require( '@stdlib/stats-base-dists-laplace-ctor' );\n*\n* var laplace = new Laplace( 1.0, 1.0 );\n*\n* var y = laplace.cdf( 1.5 );\n* // returns ~0.697\n*\n* var mu = laplace.mean;\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "isNumber", "isnan", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "stdev", "variance", "cdf", "logcdf", "logpdf", "mgf", "pdf", "quantile", "format", "laplaceCDF", "x", "laplaceLogCDF", "laplaceLogPDF", "laplaceMGF", "t", "laplacePDF", "laplaceQuantile", "p", "Laplace", "mu", "b", "value", "main"]
}
